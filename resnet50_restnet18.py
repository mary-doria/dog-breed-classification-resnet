# -*- coding: utf-8 -*-
"""Trabajo_3_ResNet50_RestNet18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13f9mZq3zNG9vpm-z2ItQUxAObWiDW2fJ
"""

pip install transformers

import matplotlib.pyplot as plt
import tensorflow_datasets as tfds
from transformers import AutoImageProcessor, ResNetForImageClassification
import torch

ds = list(tfds.load('stanford_dogs', split='train[123:450]', shuffle_files=True))

"""# RESNET 50"""

image = ds[0]["image"]
plt.imshow(image)

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print("Dog breed: ",model.config.id2label[predicted_label])

image = ds[6]["image"]
plt.imshow(image)

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print("Dog breed: ",model.config.id2label[predicted_label])

image = ds[50]["image"]
plt.imshow(image)

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print("Dog breed: ",model.config.id2label[predicted_label])

"""# RESNET 18"""

image = ds[40]["image"]
plt.imshow(image)

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-18")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-18")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print("Dog breed: ",model.config.id2label[predicted_label])

image = ds[65]["image"]
plt.imshow(image)

processor = AutoImageProcessor.from_pretrained("microsoft/resnet-18")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-18")

inputs = processor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print("Dog breed: ",model.config.id2label[predicted_label])

import numpy as np
labels_vec = []  #agrega las etiquetas verdaderas

for ds_i in ds:
  label = str(ds_i['image/filename'].numpy()).split('/')[1].split('-')[1].replace('_', ' ').replace('-', ' ')
  labels_vec.append(label)

labels, counts = np.unique(labels_vec, return_counts=True)

len(labels), len(labels_vec)

labels_vec[0]

import matplotlib.pyplot as plt
import tensorflow_datasets as tfds
from transformers import AutoImageProcessor, AutoModelForImageClassification
import torch

images = [ds_i['image'] for ds_i in ds]   #Imagenes de ds_i agregadas a la lista
pred = []

for image in images:
  image_processor = AutoImageProcessor.from_pretrained("microsoft/resnet-18")
  model = AutoModelForImageClassification.from_pretrained("microsoft/resnet-18")

  inputs = image_processor(image, return_tensors="pt")

  with torch.no_grad():
      logits = model(**inputs).logits

  # model predicts one of the 1000 ImageNet classes
  predicted_label = logits.argmax(-1).item()
  pred.append(model.config.id2label[predicted_label])
  print(model.config.id2label[predicted_label])

pred_vec = []  #lista de predicicones obtenidas anteriormente
for pred_i in pred:
  pred_i_split = pred_i.split(', ')
  pred_vec.append(pred_i_split)

accuracy = 0
for i in range(len(labels_vec)):
  if labels_vec[i] in pred_vec[i]:
    accuracy += 1
  else:
    for pred_vec_i in pred_vec[i]:
      if labels_vec[i] in pred_vec_i:
        accuracy += 1
      else:
        for labels_vec_i in labels_vec[i].replace('-', ' ').split(' '):
          if labels_vec_i in pred_vec_i:
            accuracy += 1

accuracy /= len(labels_vec)
print('Eficiencia ResNet-18:', accuracy)

images = [ds_i['image'] for ds_i in ds]
pred = []

for image in images:
  image_processor = AutoImageProcessor.from_pretrained("microsoft/resnet-50")
  model = AutoModelForImageClassification.from_pretrained("microsoft/resnet-50")

  inputs = image_processor(image, return_tensors="pt")

  with torch.no_grad():
      logits = model(**inputs).logits

  # model predicts one of the 1000 ImageNet classes
  predicted_label = logits.argmax(-1).item()
  pred.append(model.config.id2label[predicted_label])
  print(model.config.id2label[predicted_label])

pred_vec = []
for pred_i in pred:
  pred_i_split = pred_i.split(', ')
  pred_vec.append(pred_i_split)

accuracy = 0
for i in range(len(labels_vec)):
  if labels_vec[i] in pred_vec[i]:
    accuracy += 1
  else:
    for pred_vec_i in pred_vec[i]:
      if labels_vec[i] in pred_vec_i:
        accuracy += 1
      else:
        for labels_vec_i in labels_vec[i].replace('-', ' ').split(' '):
          if labels_vec_i in pred_vec_i:
            accuracy += 1

accuracy /= len(labels_vec)
print('Eficiencia ResNet-50:', accuracy)